// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model SubscriptionPlan{
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name String
  price Float
  propertyLimit Int
  imagePerPropertyLimit Int
  features String
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  properties    Property[]
  role          Role       @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact{
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  phone String
  email String

  propertyId String? @db.ObjectId @unique
  Property Property? @relation(fields: [propertyId],references: [id], onDelete: Cascade)
}

model Property {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Int


  typeId       String       @db.ObjectId
  propertyType PropertyType @relation(fields: [typeId], references: [id])

  statusId       String         @db.ObjectId
  propertyStatus PropertyStatus @relation(fields: [statusId], references: [id])

  images PropertyImage[]

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  propertyLocation PropertyLocation?
  propertyFeature PropertyFeature?
  contact Contact?
}

model PropertyImage{
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  url String
  propertyId String? @db.ObjectId
  property Property? @relation(fields: [propertyId],references: [id],onDelete: Cascade)
}

model PropertyFeature{
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  bedrooms Int
  bathrooms Int
  parkingSpots Int
  area Int
  hasSwimmingPool Boolean
  hasGardenYard Boolean
  hasBalcony Boolean
  propertyId String? @db.ObjectId @unique
  property Property? @relation(fields: [propertyId],references: [id],onDelete: Cascade)
}

model PropertyLocation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  address    String
  city       String
  postalCode String
  district   String
  province   String
  landmark   String
  propertyId String? @db.ObjectId @unique
  property   Property? @relation(fields: [propertyId], references: [id],onDelete: Cascade)
}

model PropertyType {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  value      String
  properties Property[]
}

model PropertyStatus {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  value      String
  properties Property[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  USER
}

enum Plan{
  BASIC
  STANDARD
  PREMIUM
}